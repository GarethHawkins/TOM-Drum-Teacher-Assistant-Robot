<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="84.0896">
            <Box name="Sound Peak" id="1" localization="8" tooltip="Detect sound peaks.&#x0A;Each time a sound peak is detected, the onPeak output is stimulated.&#x0A;&#x0A;Note: You can set the sensibility to detect the sound peak in parameters.&#x0A;&#x0A;V1.1.0" x="516" y="61">
              <bitmap>media/images/box/sensors/STM.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.sound = self.session().service("ALSoundDetection")
        except Exception as e:
            self.sound = None
            self.logger.error(e)

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True
        if self.sound:
            self.sound.setParameter("Sensibility", self.getParameter("Sensibility"))
        else:
            self.logger.warning("No Sound Peak can be detected")

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="SoundDetected" type="0" type_size="1" nature="4" stm_value_name="SoundDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
              <Output name="onPeak" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when a sound peak is detected." id="6" />
              <Parameter name="Sensibility" inherits_from_parent="0" content_type="2" value="0.7" default_value="0.9" min="0" max="1" tooltip="Sensibility to detect the sound peak." id="7" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="SelectElement" id="1" localization="8" tooltip="Enter tooltip here" x="220" y="61">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        self.onStopped( p[ self.getParameter( "index" ) ] )

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="index" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="100" tooltip="" id="5" />
                      </Box>
                      <Box name="If" id="2" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="363" y="60">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                        <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                        <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                        <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="=" default_value="=" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                          <Choice value="&lt;" />
                          <Choice value="&lt; or =" />
                          <Choice value="=" />
                          <Choice value="&gt; or =" />
                          <Choice value="&gt;" />
                          <Choice value="≠" />
                        </Parameter>
                        <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="1" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                      </Box>
                      <Box name="Array Streaming" id="3" localization="8" tooltip="When an array is received on the input of this box, each element is sent one by one&#x0A;to the output." x="76" y="62">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onArray(self, p):
        if( type(p) == type([]) ):
            for elem in p:
                self.element(elem)]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onArray" type="0" type_size="1" nature="1" inner="0" tooltip="The array to stream." id="2" />
                        <Output name="element" type="0" type_size="1" nature="2" inner="0" tooltip="Each element of the array is sent to this output." id="3" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="3" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="R Arm Hit 4" id="2" localization="8" tooltip="" x="710" y="42">
              <bitmap>media/images/box/movement/move_arm.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="90">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="10" value="-23.4647" />
                    <Key frame="15" value="-23.4647" />
                    <Key frame="30" value="-23.4647" />
                    <Key frame="35" value="-23.4647" />
                    <Key frame="50" value="-23.4647" />
                    <Key frame="55" value="-23.4647" />
                    <Key frame="70" value="-23.4647" />
                    <Key frame="75" value="-23.4647" />
                    <Key frame="90" value="-23.4647" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="10" value="-67.5033" />
                    <Key frame="15" value="-67.5033" />
                    <Key frame="30" value="-67.5033" />
                    <Key frame="35" value="-67.5033" />
                    <Key frame="50" value="-67.5033" />
                    <Key frame="55" value="-67.5033" />
                    <Key frame="70" value="-67.5033" />
                    <Key frame="75" value="-67.5033" />
                    <Key frame="90" value="-67.5033" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="10" value="0.2904" />
                    <Key frame="15" value="0.2904" />
                    <Key frame="30" value="0.2904" />
                    <Key frame="35" value="0.2904" />
                    <Key frame="50" value="0.2904" />
                    <Key frame="55" value="0.2904" />
                    <Key frame="70" value="0.2904" />
                    <Key frame="75" value="0.2904" />
                    <Key frame="90" value="0.2904" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="10" value="83.6705" />
                    <Key frame="15" value="83.6705" />
                    <Key frame="30" value="83.6705" />
                    <Key frame="35" value="83.6705" />
                    <Key frame="50" value="83.6705" />
                    <Key frame="55" value="83.6705" />
                    <Key frame="70" value="83.6705" />
                    <Key frame="75" value="83.6705" />
                    <Key frame="90" value="83.6705" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="10" value="11.5114" />
                    <Key frame="15" value="12.1267" />
                    <Key frame="30" value="11.5114" />
                    <Key frame="35" value="12.1267" />
                    <Key frame="50" value="11.5114" />
                    <Key frame="55" value="12.1267" />
                    <Key frame="70" value="11.5114" />
                    <Key frame="75" value="12.1267" />
                    <Key frame="90" value="11.5114" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="10" value="7.20472" />
                    <Key frame="15" value="7.20472" />
                    <Key frame="30" value="7.20472" />
                    <Key frame="35" value="7.20472" />
                    <Key frame="50" value="7.20472" />
                    <Key frame="55" value="7.20472" />
                    <Key frame="70" value="7.20472" />
                    <Key frame="75" value="7.20472" />
                    <Key frame="90" value="7.20472" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="1" value="25.2" />
                    <Key frame="10" value="62.8" />
                    <Key frame="15" value="29.7" />
                    <Key frame="25" value="29.1" />
                    <Key frame="30" value="62.8" />
                    <Key frame="35" value="7.3" />
                    <Key frame="50" value="62.8" />
                    <Key frame="55" value="7.3" />
                    <Key frame="70" value="62.8" />
                    <Key frame="75" value="7.3" />
                    <Key frame="90" value="62.8" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="1" value="70.7" />
                    <Key frame="10" value="71.8" />
                    <Key frame="15" value="74.9" />
                    <Key frame="25" value="74.4" />
                    <Key frame="30" value="71.8" />
                    <Key frame="35" value="73" />
                    <Key frame="50" value="71.8" />
                    <Key frame="55" value="73" />
                    <Key frame="70" value="71.8" />
                    <Key frame="75" value="73" />
                    <Key frame="90" value="71.8" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                    <Key frame="1" value="0.33" />
                    <Key frame="10" value="0.16" />
                    <Key frame="15" value="0.37" />
                    <Key frame="25" value="0.36" />
                    <Key frame="30" value="0.16" />
                    <Key frame="35" value="0.15" />
                    <Key frame="50" value="0.16" />
                    <Key frame="55" value="0.15" />
                    <Key frame="70" value="0.16" />
                    <Key frame="75" value="0.15" />
                    <Key frame="90" value="0.16" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="1" value="85.1" />
                    <Key frame="10" value="98.1" />
                    <Key frame="15" value="84.8" />
                    <Key frame="25" value="84.1" />
                    <Key frame="30" value="98.1" />
                    <Key frame="35" value="98.8" />
                    <Key frame="50" value="98.1" />
                    <Key frame="55" value="98.8" />
                    <Key frame="70" value="98.1" />
                    <Key frame="75" value="98.8" />
                    <Key frame="90" value="98.1" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="1" value="-10.8" />
                    <Key frame="10" value="-17.3" />
                    <Key frame="15" value="-9.7" />
                    <Key frame="25" value="-10.2" />
                    <Key frame="30" value="-17.3" />
                    <Key frame="35" value="-19" />
                    <Key frame="50" value="-17.3" />
                    <Key frame="55" value="-19" />
                    <Key frame="70" value="-17.3" />
                    <Key frame="75" value="-19" />
                    <Key frame="90" value="-17.3" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="1" value="7.6" />
                    <Key frame="10" value="6.8" />
                    <Key frame="15" value="8.4" />
                    <Key frame="25" value="8.7" />
                    <Key frame="30" value="6.8" />
                    <Key frame="35" value="6.9" />
                    <Key frame="50" value="6.8" />
                    <Key frame="55" value="6.9" />
                    <Key frame="70" value="6.8" />
                    <Key frame="75" value="6.9" />
                    <Key frame="90" value="6.8" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Box name="Sound Peak (1)" id="8" localization="8" tooltip="Detect sound peaks.&#x0A;Each time a sound peak is detected, the onPeak output is stimulated.&#x0A;&#x0A;Note: You can set the sensibility to detect the sound peak in parameters.&#x0A;&#x0A;V1.1.0" x="528" y="201">
              <bitmap>media/images/box/sensors/STM.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.sound = self.session().service("ALSoundDetection")
        except Exception as e:
            self.sound = None
            self.logger.error(e)

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True
        if self.sound:
            self.sound.setParameter("Sensibility", self.getParameter("Sensibility"))
        else:
            self.logger.warning("No Sound Peak can be detected")

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="SoundDetected" type="0" type_size="1" nature="4" stm_value_name="SoundDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
              <Output name="onPeak" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when a sound peak is detected." id="6" />
              <Parameter name="Sensibility" inherits_from_parent="0" content_type="2" value="0.7" default_value="0.9" min="0" max="1" tooltip="Sensibility to detect the sound peak." id="7" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="SelectElement" id="1" localization="8" tooltip="Enter tooltip here" x="220" y="61">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        self.onStopped( p[ self.getParameter( "index" ) ] )

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="index" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="100" tooltip="" id="5" />
                      </Box>
                      <Box name="If" id="2" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="363" y="60">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                        <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                        <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                        <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="=" default_value="=" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                          <Choice value="&lt;" />
                          <Choice value="&lt; or =" />
                          <Choice value="=" />
                          <Choice value="&gt; or =" />
                          <Choice value="&gt;" />
                          <Choice value="≠" />
                        </Parameter>
                        <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="1" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                      </Box>
                      <Box name="Array Streaming" id="3" localization="8" tooltip="When an array is received on the input of this box, each element is sent one by one&#x0A;to the output." x="76" y="62">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onArray(self, p):
        if( type(p) == type([]) ):
            for elem in p:
                self.element(elem)]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onArray" type="0" type_size="1" nature="1" inner="0" tooltip="The array to stream." id="2" />
                        <Output name="element" type="0" type_size="1" nature="2" inner="0" tooltip="Each element of the array is sent to this output." id="3" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="3" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="R Arm Hit 1" id="9" localization="8" tooltip="" x="718" y="199">
              <bitmap>media/images/box/movement/move_arm.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="25">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="10" value="-23.4647" />
                    <Key frame="15" value="-23.4647" />
                    <Key frame="25" value="-23.4647" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="10" value="-67.5033" />
                    <Key frame="15" value="-67.5033" />
                    <Key frame="25" value="-67.5033" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="10" value="0.2904" />
                    <Key frame="15" value="0.2904" />
                    <Key frame="25" value="0.2904" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="10" value="83.6705" />
                    <Key frame="15" value="83.6705" />
                    <Key frame="25" value="83.6705" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="10" value="11.5114" />
                    <Key frame="15" value="12.1267" />
                    <Key frame="25" value="11.5114" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="10" value="7.20472" />
                    <Key frame="15" value="7.20472" />
                    <Key frame="25" value="7.20472" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="1" value="25.2" />
                    <Key frame="10" value="62.8" />
                    <Key frame="15" value="7.3" />
                    <Key frame="25" value="62.8" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="1" value="70.7" />
                    <Key frame="10" value="71.8" />
                    <Key frame="15" value="73" />
                    <Key frame="25" value="71.8" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                    <Key frame="1" value="0.33" />
                    <Key frame="10" value="0.16" />
                    <Key frame="15" value="0.15" />
                    <Key frame="25" value="0.16" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="1" value="85.1" />
                    <Key frame="10" value="98.1" />
                    <Key frame="15" value="98.8" />
                    <Key frame="25" value="98.1" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="1" value="-10.8" />
                    <Key frame="10" value="-17.3" />
                    <Key frame="15" value="-19" />
                    <Key frame="25" value="-17.3" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="1" value="7.6" />
                    <Key frame="10" value="6.8" />
                    <Key frame="15" value="6.9" />
                    <Key frame="25" value="6.8" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Box name="Tactile Head" id="12" localization="8" tooltip="Detect touch on head tactile sensor." x="120" y="176">
              <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
              <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
              <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
              <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
              <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
              <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                      <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="Head-sequence" type="Lock" timeout="0" />
            </Box>
            <Box name="L &amp; R hit" id="13" localization="8" tooltip="" x="716" y="320">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="95">
                <ActuatorList model="">
                  <ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0">
                    <Key frame="1" value="-12.1" />
                    <Key frame="95" value="-12.1" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0">
                    <Key frame="1" value="0.5" />
                    <Key frame="95" value="0.5" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="20" value="-28.2108" />
                    <Key frame="22" value="-56.0725" />
                    <Key frame="40" value="-56.0725" />
                    <Key frame="42" value="-3.77694" />
                    <Key frame="60" value="-28.2108" />
                    <Key frame="62" value="-21.5311" />
                    <Key frame="80" value="-43.0645" />
                    <Key frame="82" value="-3.77694" />
                    <Key frame="95" value="-26.9804" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="20" value="-72.7768" />
                    <Key frame="22" value="-72.7768" />
                    <Key frame="40" value="-72.7768" />
                    <Key frame="42" value="-72.1615" />
                    <Key frame="60" value="-72.7768" />
                    <Key frame="62" value="-69.7884" />
                    <Key frame="80" value="-71.9857" />
                    <Key frame="82" value="-71.9857" />
                    <Key frame="95" value="-71.9857" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="20" value="0.0324" />
                    <Key frame="22" value="0.1264" />
                    <Key frame="40" value="0.1264" />
                    <Key frame="42" value="0.112" />
                    <Key frame="60" value="0.0184" />
                    <Key frame="62" value="0.0944" />
                    <Key frame="80" value="0.1084" />
                    <Key frame="82" value="0.12" />
                    <Key frame="95" value="0.0224" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="20" value="97.8211" />
                    <Key frame="22" value="100.458" />
                    <Key frame="40" value="100.458" />
                    <Key frame="42" value="97.9969" />
                    <Key frame="60" value="97.8211" />
                    <Key frame="62" value="86.0436" />
                    <Key frame="80" value="97.4695" />
                    <Key frame="82" value="97.4695" />
                    <Key frame="95" value="99.1395" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="20" value="17.6638" />
                    <Key frame="22" value="14.2361" />
                    <Key frame="40" value="14.2361" />
                    <Key frame="42" value="18.0154" />
                    <Key frame="60" value="18.2791" />
                    <Key frame="62" value="14.1482" />
                    <Key frame="80" value="17.3123" />
                    <Key frame="82" value="17.3123" />
                    <Key frame="95" value="17.9275" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="20" value="3.95273" />
                    <Key frame="22" value="4.56796" />
                    <Key frame="40" value="4.56796" />
                    <Key frame="42" value="4.56796" />
                    <Key frame="60" value="2.98591" />
                    <Key frame="62" value="4.83163" />
                    <Key frame="80" value="3.60116" />
                    <Key frame="82" value="4.74374" />
                    <Key frame="95" value="3.16169" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="1" value="29.9" />
                    <Key frame="20" value="56.1652" />
                    <Key frame="22" value="7.64898" />
                    <Key frame="40" value="7.64898" />
                    <Key frame="42" value="7.64898" />
                    <Key frame="60" value="57.3078" />
                    <Key frame="62" value="9.40682" />
                    <Key frame="80" value="8.17634" />
                    <Key frame="82" value="8.17634" />
                    <Key frame="95" value="29.0067" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="1" value="73.1" />
                    <Key frame="20" value="72.7719" />
                    <Key frame="22" value="73.4751" />
                    <Key frame="40" value="73.4751" />
                    <Key frame="42" value="73.4751" />
                    <Key frame="60" value="72.7719" />
                    <Key frame="62" value="73.4751" />
                    <Key frame="80" value="73.4751" />
                    <Key frame="82" value="73.4751" />
                    <Key frame="95" value="73.4751" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                    <Key frame="1" value="0.16" />
                    <Key frame="20" value="0.1596" />
                    <Key frame="22" value="0.0488" />
                    <Key frame="40" value="0.0488" />
                    <Key frame="42" value="0.0196" />
                    <Key frame="60" value="0.1596" />
                    <Key frame="62" value="0.1596" />
                    <Key frame="80" value="0.0828" />
                    <Key frame="82" value="0.0212001" />
                    <Key frame="95" value="0.142" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="1" value="97.9" />
                    <Key frame="20" value="98.7927" />
                    <Key frame="22" value="98.0017" />
                    <Key frame="40" value="98.0017" />
                    <Key frame="42" value="98.0017" />
                    <Key frame="60" value="98.7927" />
                    <Key frame="62" value="98.1775" />
                    <Key frame="80" value="98.1775" />
                    <Key frame="82" value="98.1775" />
                    <Key frame="95" value="98.9685" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="1" value="-17.7" />
                    <Key frame="20" value="-18.2839" />
                    <Key frame="22" value="-18.3718" />
                    <Key frame="40" value="-18.3718" />
                    <Key frame="42" value="-18.3718" />
                    <Key frame="60" value="-18.2839" />
                    <Key frame="62" value="-18.2839" />
                    <Key frame="80" value="-18.8991" />
                    <Key frame="82" value="-18.8991" />
                    <Key frame="95" value="-18.8991" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="1" value="6.2" />
                    <Key frame="20" value="5.88634" />
                    <Key frame="22" value="5.88634" />
                    <Key frame="40" value="5.88634" />
                    <Key frame="42" value="5.88634" />
                    <Key frame="60" value="5.88634" />
                    <Key frame="62" value="5.88634" />
                    <Key frame="80" value="5.88634" />
                    <Key frame="82" value="5.88634" />
                    <Key frame="95" value="5.88634" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Box name="Sound Peak (2)" id="14" localization="8" tooltip="Detect sound peaks.&#x0A;Each time a sound peak is detected, the onPeak output is stimulated.&#x0A;&#x0A;Note: You can set the sensibility to detect the sound peak in parameters.&#x0A;&#x0A;V1.1.0" x="537" y="328">
              <bitmap>media/images/box/sensors/STM.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.sound = self.session().service("ALSoundDetection")
        except Exception as e:
            self.sound = None
            self.logger.error(e)

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True
        if self.sound:
            self.sound.setParameter("Sensibility", self.getParameter("Sensibility"))
        else:
            self.logger.warning("No Sound Peak can be detected")

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="SoundDetected" type="0" type_size="1" nature="4" stm_value_name="SoundDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
              <Output name="onPeak" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when a sound peak is detected." id="6" />
              <Parameter name="Sensibility" inherits_from_parent="0" content_type="2" value="0.7" default_value="0.9" min="0" max="1" tooltip="Sensibility to detect the sound peak." id="7" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="SelectElement" id="1" localization="8" tooltip="Enter tooltip here" x="220" y="61">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        self.onStopped( p[ self.getParameter( "index" ) ] )

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="index" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="100" tooltip="" id="5" />
                      </Box>
                      <Box name="If" id="2" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="363" y="60">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                        <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                        <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                        <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="=" default_value="=" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                          <Choice value="&lt;" />
                          <Choice value="&lt; or =" />
                          <Choice value="=" />
                          <Choice value="&gt; or =" />
                          <Choice value="&gt;" />
                          <Choice value="≠" />
                        </Parameter>
                        <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="1" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                      </Box>
                      <Box name="Array Streaming" id="3" localization="8" tooltip="When an array is received on the input of this box, each element is sent one by one&#x0A;to the output." x="76" y="62">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onArray(self, p):
        if( type(p) == type([]) ):
            for elem in p:
                self.element(elem)]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onArray" type="0" type_size="1" nature="1" inner="0" tooltip="The array to stream." id="2" />
                        <Output name="element" type="0" type_size="1" nature="2" inner="0" tooltip="Each element of the array is sent to this output." id="3" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="3" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Bumpers" id="17" localization="8" tooltip="Listen to bumpers sensors. Stimulate onLeft or onRight output depending on&#x0A;which bumper is stimulated." x="120" y="75">
              <bitmap>media/images/box/movement/move_foot.png</bitmap>
              <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
              <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="6" />
              <Output name="onLeft" type="1" type_size="1" nature="2" inner="0" tooltip="When left bumper is stimulated." id="7" />
              <Output name="onRight" type="1" type_size="1" nature="2" inner="0" tooltip="When right bumper is stimulated." id="8" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="196" y="61">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                      </Box>
                      <Box name="If &gt; 0" id="4" localization="8" tooltip="Transmit only if value is &gt; 0." x="197" y="165">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="3" />
                      <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="8" outputowner="4" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Close Hands" id="22" localization="8" tooltip="" x="613" y="707">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        motionProxy = ALProxy("ALMotion")
        hands = ['RHand', 'LHand']
        times = [[0.5], [0.5]]
        motionProxy.angleInterpolation(hands, [0.0, 0.0], times, True)

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Speech Reco." id="3" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="171" y="576">
              <bitmap>media/images/box/interaction/ear.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
              <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
              <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="open;close" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
              <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="13" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
              <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
              <Resource name="Speech recognition" type="Lock" timeout="0" />
            </Box>
            <Box name="Open Hands" id="4" localization="8" tooltip="" x="615" y="591">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        motionProxy = ALProxy("ALMotion")
        hands = ['RHand', 'LHand']
        times = [[0.5], [0.5]]
        motionProxy.angleInterpolation(hands, [0.0, 0.0], times, True)

        motionProxy.angleInterpolation(hands, [0.30, 0.30], times, True)

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Switch Case" id="5" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="335" y="645">
              <bitmap>media/images/box/interaction/choice.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("open")):
			self.output_1(p)
		elif(p == self.typeConversion("close")):
			self.output_2(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                </content>
              </script>
              <pluginContent>
                <keywords>
                  <keyword>&quot;open&quot;</keyword>
                  <keyword>&quot;close&quot;</keyword>
                  <keyword></keyword>
                </keywords>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
              <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
              <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
              <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
            </Box>
            <Box name="Record Sound" id="15" localization="8" tooltip='Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head microphones) in wav format.&#x0A;&#x0A;If &quot;Temporary storage&quot; isn&apos;t checked, the output sound file is located in &quot;~/recordings/microphones/&lt;File name&gt;&quot;.&#x0A;Else, it is located in a temporary directory&#x0A;&#x0A;The onStopped output is stimulated at the end of the recording and contains the absolute path to the output sound file&#x0A;&#x0A;V1.1.0&#x0A;' x="400" y="477">
              <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" />
              <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" />
              <Parameter name="File name" inherits_from_parent="0" content_type="3" value="recording" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" />
              <Parameter name="Microphones used" inherits_from_parent="0" content_type="3" value="Front head microphone only (.ogg)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="6">
                <Choice value="Front head microphone only (.ogg)" />
                <Choice value="Front, sides and rear head microphones (.wav)" />
              </Parameter>
              <Parameter name="Temporary storage" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is disabled the file is stored in ~/recordings/microphones. You can&#x0A;then get it on your computer using the menu Connection/File transfer.&#x0A;&#x0A;When this option is enabled the file is stored in the temporary folder of the behavior." id="7" />
              <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="5" min="0.1" max="60" tooltip="Duration of the recording in seconds." id="8" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Rec. Sound File" id="4" localization="8" tooltip="Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head&#x0A;microphones) in wav format." x="562" y="100">
                        <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.filepath = ""

    def onLoad(self):
        try:
            self.ad = self.session().service("ALAudioDevice")
        except Exception as e:
            self.ad = None
            self.logger.error(e)
        self.bIsRecording = False
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False
        if( self.bIsRecording ):
            self.ad.stopMicrophonesRecording()
            self.bIsRecording = False

    def onInput_onStart(self, p):
        if(self.bIsRunning):
            return
        self.bIsRunning = True
        sExtension = self.toExtension( self.getParameter("Microphones used") )
        self.filepath = p + sExtension
        if self.ad:
            self.ad.startMicrophonesRecording( self.filepath )
            self.bIsRecording = True
        else:
            self.logger.warning("No sound recorded")

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped(self.filepath)

    def toExtension(self, sMicrophones):
        if( sMicrophones == "Front head microphone only (.ogg)" ):
            return ".ogg"
        else:
            return ".wav"]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound. The data received on this input must be the&#x0A;filename of the sound." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" />
                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" />
                        <Parameter name="Microphones used" inherits_from_parent="1" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="5">
                          <Choice value="Front head microphone only (.ogg)" />
                          <Choice value="Front, sides and rear head microphones (.wav)" />
                        </Parameter>
                      </Box>
                      <Box name="Get File Name" id="10" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="234" y="95">
                        <bitmap>media/images/box/folder.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import os
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        if( self.getParameter("Temporary storage") ):
            import tempfile
            path = tempfile.mkdtemp() + "/"
        else:
            path = os.path.expanduser('~') + "/recordings/microphones/"
        self.onStopped( path + self.getParameter("File name") )]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                        <Parameter name="File name" inherits_from_parent="1" content_type="3" value="recording" default_value="" custom_choice="0" tooltip="Name of the file." id="4" />
                        <Parameter name="Temporary storage" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is enabled the file is stored in ~/.cache/currentChoregrapheBehavior&#x0A;or in ~/.cache/&lt;project_name&gt; when you play the behavior from the&#x0A;behavior manager.&#x0A;&#x0A;When it is disabled the file is stored in ~/recordedSounds. You can&#x0A;then get it on your computer using the menu Connection/File transfer." id="5" />
                      </Box>
                      <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="392" y="166">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="1" content_type="2" value="5" default_value="5" min="0.1" max="60" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="3" />
                      <Link inputowner="6" indexofinput="2" outputowner="10" indexofoutput="3" />
                      <Link inputowner="4" indexofinput="3" outputowner="6" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="Audio recorder" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="1" indexofinput="2" outputowner="12" indexofoutput="8" />
            <Link inputowner="8" indexofinput="2" outputowner="12" indexofoutput="9" />
            <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="10" />
            <Link inputowner="17" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="1" indexofinput="3" outputowner="17" indexofoutput="7" />
            <Link inputowner="8" indexofinput="3" outputowner="17" indexofoutput="7" />
            <Link inputowner="14" indexofinput="3" outputowner="17" indexofoutput="7" />
            <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="6" />
            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="6" />
            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="5" />
            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="22" indexofinput="2" outputowner="5" indexofoutput="5" />
            <Link inputowner="13" indexofinput="2" outputowner="14" indexofoutput="6" />
            <Link inputowner="15" indexofinput="2" outputowner="12" indexofoutput="8" />
            <Link inputowner="15" indexofinput="2" outputowner="12" indexofoutput="9" />
            <Link inputowner="15" indexofinput="2" outputowner="12" indexofoutput="10" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
